Basically, I wasn't told how to write the program and so, I utilize javacc to help me out to build the app and that is
why I can complete it in a very short time. But I still encountered a problem,
because each calculation function could be recursively calling another calculation
so, I have a hard time dealing with left recursive error that was generated by
the javacc tools. But fortunately I was able to fix this issue. Actually, maintaining
this code is easy, just modify the calculator.jj and use javacc to regenerate the 
java code again and this is exactly followed the open-close principle (open
for extend and close for modification) because I don't need to re-test the 
existing function.  I didn't write any error handling but just capture the error and 
throw exception if any error was found during parsing and executing such as:

1. divided by zero
2. integer value out the the limit of Integer.min and max
3. invalid parameter (e.g. add(1,2)-correct   add(1,2,3)-incorrect)
4. invalid variable name (name only have a-z or A-Z, no digit no underscore)
5  access non existing variable (variable without define)


I didn't build the maven project because I have no knowledge with it and I want
to turn in the homework ASAP and don't want to spend too much time to struggle on 
how to build maven project. Sorry about that.

I have created a package call calculator. Since I need to include log4j.jar in the project
for logging purpose and so , I created a build.sh file which including a class path to run the build. 
I also create batch.bat that can be run on windows platform. To execute
the program, I  created a exec.sh file. It is because I also need to include the
class path for log4j.jar when executing the program.

Therefore to execute the program, the syntax will be :

for linux: ./exec.sh "add(1,2)"
for windows:  exec.bat "let(a, let(b,10,add(b,b)), let(b,20,add(a,b)))"



Run the build generate class file:
linux: ./build.sh
windows; build.bat



Note: if class path was defined for log4j.jar in the environment setting
then you don't need to run my shell script/batch but just run:


To build:

javac calculator/*.java


and to execute:

java calculator.Main "add(-1, 10)"

