/* Generated By:JavaCC: Do not edit this line. Main.java */
package calculator;

import java.util.*;
import java.io.*;
import org.apache.log4j.Logger;


public class Main implements MainConstants {

    private static Map temp = new HashMap();
    static Logger log = Logger.getLogger( Main.class.getName());

    //Whenever error was occured, such as 
     // divided by zero, 
     // invalid int value (outside Integer.min and max value) 
     // invalid variable name format (only a-z and A-Z, no digit and no underscore)
     // invalid function parameters
   //exception will be thrown and the program will be terminated. 
    public static void main(String args[]) throws ParseException {

      try{
        log.info("start program");

                if(args.length > 0){

                        String a = args[0].replace(" ", "");
                        InputStream is = new ByteArrayInputStream(a.getBytes());
                Main parser = new Main(is);

                System.out.flush();
                        parser.start();
                }
      }
      catch(ParseException x){
                log.error("Parse failure:"+x.getMessage());
      }
      catch(Exception e){
        log.error("Unexpected Error:"+ e.getMessage());
      }

        log.info("end program");

    }

  static final public void start() throws ParseException {
        int i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUB:
    case ADD:
    case MULT:
    case DIV:
      i = caltype();
                log.info("result: " + i);
      break;
    case LET:
      i = let();
                log.info("result: " + i);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public int caltype() throws ParseException {
        int i ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      i = add();
                        {if (true) return i;}
      break;
    case MULT:
      i = mult();
                        {if (true) return i;}
      break;
    case DIV:
      i = div();
                        {if (true) return i;}
      break;
    case SUB:
      i = sub();
                        {if (true) return i;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public int add() throws ParseException {
        int i = 0;
        int j = 0;
    jj_consume_token(ADD);
    jj_consume_token(12);
    i = param();
    jj_consume_token(13);
    j = param();
    jj_consume_token(14);
     if(log.isDebugEnabled())
        log.debug("add result=" + (i+j));
         {if (true) return i + j;}
    throw new Error("Missing return statement in function");
  }

  static final public int mult() throws ParseException {
        int i;
        int j;
    jj_consume_token(MULT);
    jj_consume_token(12);
    i = param();
    jj_consume_token(13);
    j = param();
    jj_consume_token(14);
     if(log.isDebugEnabled())
        log.debug("multiply result=" + (i*j));

         {if (true) return i * j;}
    throw new Error("Missing return statement in function");
  }

  static final public int param() throws ParseException {
        int i;
        Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUB:
    case ADD:
    case MULT:
    case DIV:
      i = caltype();
                         {if (true) return i;}
      break;
    case NUMBER:
      i = number();
                         {if (true) return i;}
      break;
    case VARIABLE:
      token = jj_consume_token(VARIABLE);
                                                        String key = token.image;
                                                        i =  (Integer) temp.get(key);
                                                        {if (true) return i;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public int div() throws ParseException {
        int i;
        int j;
    jj_consume_token(DIV);
    jj_consume_token(12);
    i = param();
    jj_consume_token(13);
    j = param();
    jj_consume_token(14);
     if(log.isDebugEnabled())
        log.debug("div result=" + (i/j));

         {if (true) return i / j;}
    throw new Error("Missing return statement in function");
  }

  static final public int sub() throws ParseException {
        int i;
        int j;
    jj_consume_token(SUB);
    jj_consume_token(12);
    i = param();
    jj_consume_token(13);
    j = param();
    jj_consume_token(14);
     if(log.isDebugEnabled())
        log.debug("sub result=" + (i-j));

         {if (true) return i - j;}
    throw new Error("Missing return statement in function");
  }

  static final public int let() throws ParseException {
        Token token;
        int i;
        int j;
    jj_consume_token(LET);
    jj_consume_token(12);
    token = jj_consume_token(VARIABLE);
    jj_consume_token(13);
    i = valueexpression();
    jj_consume_token(13);
            if(log.isDebugEnabled())
                log.debug("Variable =" + token.image + "    set value=" + i);
                temp.put(token.image, i);
    j = letparam();
    jj_consume_token(14);
                                {if (true) return j;}
    throw new Error("Missing return statement in function");
  }

  static final public int valueexpression() throws ParseException {
        int i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LET:
      i = let();
                      {if (true) return i;}
      break;
    case SUB:
    case ADD:
    case MULT:
    case DIV:
      i = caltype();
                          {if (true) return i;}
      break;
    case NUMBER:
      i = number();
                          {if (true) return i;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public int letparam() throws ParseException {
        int i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LET:
      i = let();
                     {if (true) return i;}
      break;
    case SUB:
    case ADD:
    case MULT:
    case DIV:
      i = caltype();
                          {if (true) return i;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public int number() throws ParseException {
  Token t = null;
  int i;
    t = jj_consume_token(NUMBER);
                i = Integer.parseInt(t.image);

     if(log.isDebugEnabled())
        log.debug("NUMBER parsed =" + t.image);


                {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public MainTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x3e0,0x1e0,0x5e8,0x3e8,0x3e0,};
   }

  public Main(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MainTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public Main(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MainTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public Main(MainTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(MainTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[15];
    for (int i = 0; i < 15; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
