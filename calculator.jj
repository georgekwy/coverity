PARSER_BEGIN(Main)

package calculator;

import java.util.*;
import java.io.*;
import org.apache.log4j.Logger;


public class Main{

    private static Map temp = new HashMap();
    static Logger log = Logger.getLogger( Main.class.getName());
    
    //Whenever error was occured, such as 
     // divided by zero, 
     // invalid int value (outside Integer.min and max value) 
     // invalid variable name format (only a-z and A-Z, no digit and no underscore)
     // invalid function parameters
   //exception will be thrown and the program will be terminated. 
    public static void main(String args[]) throws ParseException {

      try{      
        log.info("start program");
	 
		if(args.length > 0){
		
			String a = args[0].replace(" ", "");
			InputStream is = new ByteArrayInputStream(a.getBytes());
	       	Main parser = new Main(is);
			
	        System.out.flush();
			parser.start();
		}
      }
      catch(ParseException x){
  	   	log.error("Parse failure:"+x.getMessage());
      }
      catch(Exception e){
      	log.error("Unexpected Error:"+ e.getMessage());
      }

	log.info("end program");

    }


}

PARSER_END(Main)

SKIP :
{
  < " " >
| < "\t" >
}

TOKEN:
{
    <NUMBER : ("-")* (<DIGIT>)+ >
    |<#DIGIT : ["0" - "9"] >
}	


TOKEN:
{

    <SUB: "sub">
    |<ADD: "add">
    |<MULT: "mult">
    |<DIV: "div">
    |<LET: "let">
    |<VARIABLE : (<LETTER>)+ >
    |<LETTER : ["A" - "Z", "a" - "z" ] >
}



void start():
{
	int i;
}
{
	i = caltype()
	{
		log.info("result: " + i);
	}
	
	| i = let()
	  {	
	  	log.info("result: " + i); 
	  }
	
}


int caltype():{
	int i ;
}
{
	i = add() {	return i; }
	| i = mult()  {	return i; }
	| i = div()  {	return i; }
	| i = sub()  {	return i; }
	
    
}


int add ():
{
	int i = 0;
	int j = 0;
}
{
   "add" "("  
   	   i = param() "," j = param() ")"
   {
    
     if(log.isDebugEnabled())
     	log.debug("add result=" + (i+j));
   	 return i + j;
   }
	
}



int mult ():
{
	int i;
	int j;
}
{
   "mult" "("  i = param() "," j = param() ")"
   {
     if(log.isDebugEnabled())
     	log.debug("multiply result=" + (i*j));
    
   	 return i * j;
   }
	
}


int param():
{
	int i;
	Token token;
}
{
	i = caltype()  { return i; }
	| i = number() { return i; }
	| token = <VARIABLE>  { 
							String key = token.image;
							i =  (Integer) temp.get(key);
							return i;
						   }
}

int div ():
{
	int i;
	int j;
}
{
   "div" "("  i = param() "," j = param() ")"
   {
     if(log.isDebugEnabled())
     	log.debug("div result=" + (i/j));
    
   	 return i / j;
   }
	
}


int sub ():
{
	int i;
	int j;
}
{
   "sub" "("  i = param() "," j = param() ")"
   {
     if(log.isDebugEnabled())
     	log.debug("sub result=" + (i-j));
    
   	 return i - j;
   }
	
}


int let():
{
	Token token;
	int i;
	int j;
}
{

	"let" "("  
	token = <VARIABLE> "," 
	i = valueexpression() ","   
	{  
	    if(log.isDebugEnabled())
     		log.debug("Variable =" + token.image + "    set value=" + i);
		temp.put(token.image, i); 
	}
	j = letparam()   ")"  { return j;}
}



int valueexpression():
{
	int i;
}
{
	i = let()   { return i;}
	| i = caltype() { return i;}
	| i = number()  { return i;}
}




int letparam():
{
	int i;
}

{
	i = let()  { return i;}
	
	| i = caltype() { return i;}

}


int number():
{
  Token t = null;
  int i;
}
{
	t = <NUMBER>
	{
		i = Integer.parseInt(t.image);
		
     if(log.isDebugEnabled())
     	log.debug("NUMBER parsed =" + t.image);
		
		
		return i;
	} 
}
